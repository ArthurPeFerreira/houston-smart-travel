// ======================================================
// Comandos úteis do Prisma para ambientes distintos
// ======================================================

// Gera o cliente Prisma para uso na aplicação
// npx prisma generate

// Aplica migrações no ambiente de desenvolvimento
// npx prisma migrate dev --name hst

// Aplica as migrações no ambiente de produção
// npx prisma migrate deploy

// ======================================================
// Configuração do Prisma Client
// ======================================================
generator client {
  provider      = "prisma-client-js" // Define o uso do cliente Prisma em JavaScript/TypeScript
  output        = "../prisma/generated" // Caminho de saída para o cliente gerado
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"] // Define targets binários compatíveis (ex: ambientes de produção ARM)
}

// ======================================================
// Configuração da fonte de dados (Banco PostgreSQL)
// ======================================================
datasource db {
  provider = "postgresql" // Define o provedor de banco de dados
  url      = env("DATABASE_URL") // Usa variável de ambiente para a URL de conexão
}

// ======================================================
// Modelo da Tabela de Usuários (Users)
// ======================================================
model Users {
  id         Int       @id @default(autoincrement()) // Chave primária auto-incremental
  user       String    @unique // Nome de usuário único
  password   String // Senha de autenticação
  name       String // Nome completo do usuário
  active     Boolean   @default(true) // Indica se o usuário está ativo
  dateJoined DateTime  @default(now()) // Data de criação do usuário
  lastLogin  DateTime? // Data e hora do último login (opcional)
  updatedAt  DateTime  @default(now()) // Última atualização do registro

  @@index([id], name: "IndexUserById") // Índice para facilitar buscas por ID
}

// ======================================================
// Modelo da Tabela de Aeroportos (Airports)
// ======================================================
model Airports {
  id          Int    @id @default(autoincrement()) // Chave primária auto-incremental
  city        String // Cidade onde o aeroporto está localizado
  airportCode String @unique // Código IATA exclusivo do aeroporto (ex: GRU, JFK)
  order       Int   @default(0) // Ordem de exibição do aeroporto (pode ser usado para ordenação)

  local  Locals?         @relation("AirportToLocal") // Relação opcional 1:1 com Locals
  routes AirportsRoute[] @relation("Airport") // Relação 1:N com AirportsRoute (mapeia rotas disponíveis)

  @@index([id], name: "IndexAirportsById") // Índice por ID
  @@index([order], name: "IndexAirportsByOrder") // Índice por Order
}

// ======================================================
// Modelo da Tabela de Locais (Locals)
// Utilizado na tela principal para exibir sugestões
// ======================================================
model Locals {
  id           Int     @id @default(autoincrement()) // Chave primária auto-incremental
  airportId    Int     @unique // FK exclusiva para o aeroporto associado
  city         String // Nome da cidade
  country      String // Nome do país
  passagePrice Decimal // Preço da passagem
  image        String // Caminho da imagem do local
  active       Boolean @default(true) // Define se o local está ativo e deve ser exibido

  airport Airports @relation("AirportToLocal", fields: [airportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Relação obrigatória com Airports. Exclusão ou atualização em cascata.

  @@index([id], name: "IndexLocalsById") // Índice por ID
}

// ======================================================
// Modelo da Tabela de Rotas (Route)
// Representa conexões entre aeroportos, com configurações e políticas
// ======================================================
model Route {
  id             Int     @id @default(autoincrement()) // Chave primária auto-incremental
  mileageProgram String // Nome do programa de milhagem associado à rota
  enableLayovers Boolean // Define se são permitidas escalas ou conexões
  active         Boolean @default(true) // Status da rota (ativa/inativa)

  airports   AirportsRoute[] @relation("Route") // Relação 1:N com AirportsRoute (aeroportos na rota)
  cabins     CabinsRoute[]   @relation("Cabins") // Relação 1:N com configurações de cabines
  routesData RoutesData[]    @relation("RouteData") // Relação 1:N com os dados da rota

  @@index([id], name: "IndexRoutesById") // Índice por ID
}

// ======================================================
// Modelo da Tabela CabinsRoute
// Define configurações específicas de cabine por rota
// ======================================================
model CabinsRoute {
  id                          Int     @id @default(autoincrement()) // Chave primária auto-incremental
  routeId                     Int // FK para rota
  key                         String // Identificador único da cabine dentro da rota
  maximumPoints               Int // Pontuação máxima permitida
  bagsAmount                  Int // Quantidade máxima de bagagens
  passagePriceFromAirport1To2 Decimal
  passagePriceFromAirport2To1 Decimal
  passagePriceRoundTrip       Decimal

  route Route @relation("Cabins", fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  // Relação com rota principal, com comportamento em cascata

  @@unique([routeId, key], name: "UniqueCabinPerRoute") // Garante unicidade por rota + cabine
  @@index([routeId, id], name: "IndexCabinsRoute") // Índice composto para otimizar busca
}

// ======================================================
// Modelo da Tabela AirportsRoute
// Tabela de junção entre aeroportos e rotas
// ======================================================
model AirportsRoute {
  id        Int @id @default(autoincrement()) // Chave primária auto-incremental
  airportId Int // FK para aeroporto
  routeId   Int // FK para rota

  airport Airports @relation("Airport", fields: [airportId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  route   Route    @relation("Route", fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([routeId, airportId], name: "IndexAirportsRoute") // Índice composto para acelerar filtros por rota/aeroporto
}

// ======================================================
// Modelo da Tabela RoutesData
// Tabela de associação entre rotas e dados específicos da cabine
// ======================================================
model RoutesData {
  id                 Int      @id @default(autoincrement()) // Identificador único (chave primária) com incremento automático
  routeId            Int // Chave estrangeira referenciando a rota
  originAirport      String // Aeroporto de origem
  destinationAirport String // Aeroporto de destino
  cabinKey           String // Identificador único da cabine dentro da rota
  date               DateTime // Data específica associada à cabine na rota
  direct             Boolean // Indica se a rota é direta (sem escalas)
  seats              Int // Quantidade de assentos disponíveis

  // Relacionamento com a tabela Route
  // "RouteData" é o nome do relacionamento
  // Define comportamento de deleção e atualização em cascata
  route Route @relation("RouteData", fields: [routeId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Índice composto sobre routeId e cabinKey
  // Otimiza consultas filtradas por rota e cabine
  @@index([routeId, cabinKey, date], name: "IndexRoutesData")
}

// ======================================================
// Modelo da Tabela Contador de Acessos
// ======================================================
model AccessCounter {
  id           Int      @id @default(autoincrement()) // Chave primária
  type         String   @unique // Tipo de acesso 
  count        Int      @default(0) // Quantidade de acessos
  lastAccessAt DateTime @updatedAt // Atualiza automaticamente ao salvar

}
